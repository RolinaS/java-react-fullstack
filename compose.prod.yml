version: "3.9"

services:
  postgres:
    image: postgres:16-alpine
    container_name: jr_postgres_prod
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - internal

  backend-builder:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: jr_backend_builder:prod
    container_name: jr_backend_builder_prod
    env_file: .env
    command: ["/bin/sh", "-c", "mvn -U -q -DskipTests clean package && cp -f target/*.war /dist/app.war"]
    volumes:
      - ./dist:/dist
      - maven-repo:/root/.m2
    depends_on:
      - postgres
    networks:
      - internal

  tomcat:
    build:
      context: ./tomcat
      dockerfile: Dockerfile
    image: jr_tomcat:prod
    container_name: jr_tomcat_prod
    env_file: .env
    volumes:
      - ./dist:/opt/dist
    depends_on:
      backend-builder:
        condition: service_completed_successfully
    networks:
      - internal

  frontend-builder:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: builder
    image: jr_frontend_builder:prod
    container_name: jr_frontend_builder_prod
    command: ["/bin/sh", "-c", "npm ci && npm run build && cp -r dist /out"]
    volumes:
      - ./frontend/dist:/out
    networks:
      - internal

  nginx:
    build:
      context: ./reverse-proxy
      dockerfile: Dockerfile
    image: jr_nginx:prod
    container_name: jr_nginx_prod
    ports:
      - "${NGINX_PORT}:80"
    depends_on:
      - tomcat
      - frontend-builder
    volumes:
      - ./frontend/dist:/usr/share/nginx/html:ro
    networks:
      - internal

networks:
  internal:
    driver: bridge

volumes:
  pgdata:
  maven-repo: 